/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateDmConversationRequest;
import org.openapitools.client.model.CreateDmEventResponse;
import org.openapitools.client.model.CreateMessageRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Get2DmConversationsIdDmEventsResponse;
import org.openapitools.client.model.Get2DmConversationsWithParticipantIdDmEventsResponse;
import org.openapitools.client.model.Get2DmEventsResponse;
import org.openapitools.client.model.Problem;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DirectMessagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectMessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectMessagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dmConversationByIdEventIdCreate
     * @param dmConversationId The DM Conversation ID. (required)
     * @param createMessageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dmConversationByIdEventIdCreateCall(String dmConversationId, CreateMessageRequest createMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessageRequest;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/{dm_conversation_id}/messages"
            .replaceAll("\\{" + "dm_conversation_id" + "\\}", localVarApiClient.escapeString(dmConversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dmConversationByIdEventIdCreateValidateBeforeCall(String dmConversationId, CreateMessageRequest createMessageRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dmConversationId' is set
        if (dmConversationId == null) {
            throw new ApiException("Missing the required parameter 'dmConversationId' when calling dmConversationByIdEventIdCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dmConversationByIdEventIdCreateCall(dmConversationId, createMessageRequest, _callback);
        return localVarCall;

    }

    /**
     * Send a new message to a DM Conversation
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     * @param dmConversationId The DM Conversation ID. (required)
     * @param createMessageRequest  (optional)
     * @return CreateDmEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDmEventResponse dmConversationByIdEventIdCreate(String dmConversationId, CreateMessageRequest createMessageRequest) throws ApiException {
        ApiResponse<CreateDmEventResponse> localVarResp = dmConversationByIdEventIdCreateWithHttpInfo(dmConversationId, createMessageRequest);
        return localVarResp.getData();
    }

    /**
     * Send a new message to a DM Conversation
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     * @param dmConversationId The DM Conversation ID. (required)
     * @param createMessageRequest  (optional)
     * @return ApiResponse&lt;CreateDmEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDmEventResponse> dmConversationByIdEventIdCreateWithHttpInfo(String dmConversationId, CreateMessageRequest createMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = dmConversationByIdEventIdCreateValidateBeforeCall(dmConversationId, createMessageRequest, null);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a new message to a DM Conversation (asynchronously)
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     * @param dmConversationId The DM Conversation ID. (required)
     * @param createMessageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dmConversationByIdEventIdCreateAsync(String dmConversationId, CreateMessageRequest createMessageRequest, final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dmConversationByIdEventIdCreateValidateBeforeCall(dmConversationId, createMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dmConversationIdCreate
     * @param createDmConversationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dmConversationIdCreateCall(CreateDmConversationRequest createDmConversationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDmConversationRequest;

        // create path and map variables
        String localVarPath = "/2/dm_conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dmConversationIdCreateValidateBeforeCall(CreateDmConversationRequest createDmConversationRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dmConversationIdCreateCall(createDmConversationRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a new DM Conversation
     * Creates a new DM Conversation.
     * @param createDmConversationRequest  (optional)
     * @return CreateDmEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDmEventResponse dmConversationIdCreate(CreateDmConversationRequest createDmConversationRequest) throws ApiException {
        ApiResponse<CreateDmEventResponse> localVarResp = dmConversationIdCreateWithHttpInfo(createDmConversationRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new DM Conversation
     * Creates a new DM Conversation.
     * @param createDmConversationRequest  (optional)
     * @return ApiResponse&lt;CreateDmEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDmEventResponse> dmConversationIdCreateWithHttpInfo(CreateDmConversationRequest createDmConversationRequest) throws ApiException {
        okhttp3.Call localVarCall = dmConversationIdCreateValidateBeforeCall(createDmConversationRequest, null);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new DM Conversation (asynchronously)
     * Creates a new DM Conversation.
     * @param createDmConversationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dmConversationIdCreateAsync(CreateDmConversationRequest createDmConversationRequest, final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dmConversationIdCreateValidateBeforeCall(createDmConversationRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dmConversationWithUserEventIdCreate
     * @param participantId The ID of the recipient user that will receive the DM. (required)
     * @param createMessageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dmConversationWithUserEventIdCreateCall(String participantId, CreateMessageRequest createMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessageRequest;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/with/{participant_id}/messages"
            .replaceAll("\\{" + "participant_id" + "\\}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dmConversationWithUserEventIdCreateValidateBeforeCall(String participantId, CreateMessageRequest createMessageRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling dmConversationWithUserEventIdCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dmConversationWithUserEventIdCreateCall(participantId, createMessageRequest, _callback);
        return localVarCall;

    }

    /**
     * Send a new message to a user
     * Creates a new message for a DM Conversation with a participant user by ID
     * @param participantId The ID of the recipient user that will receive the DM. (required)
     * @param createMessageRequest  (optional)
     * @return CreateDmEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDmEventResponse dmConversationWithUserEventIdCreate(String participantId, CreateMessageRequest createMessageRequest) throws ApiException {
        ApiResponse<CreateDmEventResponse> localVarResp = dmConversationWithUserEventIdCreateWithHttpInfo(participantId, createMessageRequest);
        return localVarResp.getData();
    }

    /**
     * Send a new message to a user
     * Creates a new message for a DM Conversation with a participant user by ID
     * @param participantId The ID of the recipient user that will receive the DM. (required)
     * @param createMessageRequest  (optional)
     * @return ApiResponse&lt;CreateDmEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDmEventResponse> dmConversationWithUserEventIdCreateWithHttpInfo(String participantId, CreateMessageRequest createMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = dmConversationWithUserEventIdCreateValidateBeforeCall(participantId, createMessageRequest, null);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a new message to a user (asynchronously)
     * Creates a new message for a DM Conversation with a participant user by ID
     * @param participantId The ID of the recipient user that will receive the DM. (required)
     * @param createMessageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dmConversationWithUserEventIdCreateAsync(String participantId, CreateMessageRequest createMessageRequest, final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dmConversationWithUserEventIdCreateValidateBeforeCall(participantId, createMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDmConversationsIdDmEvents
     * @param id The DM Conversation ID. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDmConversationsIdDmEventsCall(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/{id}/dm_events"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_types", eventTypes));
        }

        if (dmEventFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "dm_event.fields", dmEventFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDmConversationsIdDmEventsValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDmConversationsIdDmEvents(Async)");
        }
        

        okhttp3.Call localVarCall = getDmConversationsIdDmEventsCall(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        return localVarCall;

    }

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param id The DM Conversation ID. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2DmConversationsIdDmEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public Get2DmConversationsIdDmEventsResponse getDmConversationsIdDmEvents(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        ApiResponse<Get2DmConversationsIdDmEventsResponse> localVarResp = getDmConversationsIdDmEventsWithHttpInfo(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
        return localVarResp.getData();
    }

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param id The DM Conversation ID. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return ApiResponse&lt;Get2DmConversationsIdDmEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Get2DmConversationsIdDmEventsResponse> getDmConversationsIdDmEventsWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getDmConversationsIdDmEventsValidateBeforeCall(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2DmConversationsIdDmEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DM Events for a DM Conversation (asynchronously)
     * Returns DM Events for a DM Conversation
     * @param id The DM Conversation ID. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDmConversationsIdDmEventsAsync(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback<Get2DmConversationsIdDmEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDmConversationsIdDmEventsValidateBeforeCall(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2DmConversationsIdDmEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDmConversationsWithParticipantIdDmEvents
     * @param participantId The ID of the participant user for the One to One DM conversation. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDmConversationsWithParticipantIdDmEventsCall(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/with/{participant_id}/dm_events"
            .replaceAll("\\{" + "participant_id" + "\\}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_types", eventTypes));
        }

        if (dmEventFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "dm_event.fields", dmEventFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDmConversationsWithParticipantIdDmEventsValidateBeforeCall(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getDmConversationsWithParticipantIdDmEvents(Async)");
        }
        

        okhttp3.Call localVarCall = getDmConversationsWithParticipantIdDmEventsCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        return localVarCall;

    }

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param participantId The ID of the participant user for the One to One DM conversation. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2DmConversationsWithParticipantIdDmEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public Get2DmConversationsWithParticipantIdDmEventsResponse getDmConversationsWithParticipantIdDmEvents(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        ApiResponse<Get2DmConversationsWithParticipantIdDmEventsResponse> localVarResp = getDmConversationsWithParticipantIdDmEventsWithHttpInfo(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
        return localVarResp.getData();
    }

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param participantId The ID of the participant user for the One to One DM conversation. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return ApiResponse&lt;Get2DmConversationsWithParticipantIdDmEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Get2DmConversationsWithParticipantIdDmEventsResponse> getDmConversationsWithParticipantIdDmEventsWithHttpInfo(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getDmConversationsWithParticipantIdDmEventsValidateBeforeCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2DmConversationsWithParticipantIdDmEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DM Events for a DM Conversation (asynchronously)
     * Returns DM Events for a DM Conversation
     * @param participantId The ID of the participant user for the One to One DM conversation. (required)
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDmConversationsWithParticipantIdDmEventsAsync(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback<Get2DmConversationsWithParticipantIdDmEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDmConversationsWithParticipantIdDmEventsValidateBeforeCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2DmConversationsWithParticipantIdDmEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDmEvents
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDmEventsCall(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/dm_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_types", eventTypes));
        }

        if (dmEventFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "dm_event.fields", dmEventFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDmEventsValidateBeforeCall(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDmEventsCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        return localVarCall;

    }

    /**
     * Get recent DM Events
     * Returns recent DM Events across DM conversations
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return Get2DmEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public Get2DmEventsResponse getDmEvents(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        ApiResponse<Get2DmEventsResponse> localVarResp = getDmEventsWithHttpInfo(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
        return localVarResp.getData();
    }

    /**
     * Get recent DM Events
     * Returns recent DM Events across DM conversations
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @return ApiResponse&lt;Get2DmEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Get2DmEventsResponse> getDmEventsWithHttpInfo(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getDmEventsValidateBeforeCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, null);
        Type localVarReturnType = new TypeToken<Get2DmEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recent DM Events (asynchronously)
     * Returns recent DM Events across DM conversations
     * @param maxResults The maximum number of results. (optional, default to 100)
     * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
     * @param eventTypes The set of event_types to include in the results. (optional)
     * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
     * @param expansions A comma separated list of fields to expand. (optional)
     * @param mediaFields A comma separated list of Media fields to display. (optional)
     * @param userFields A comma separated list of User fields to display. (optional)
     * @param tweetFields A comma separated list of Tweet fields to display. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDmEventsAsync(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback<Get2DmEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDmEventsValidateBeforeCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2DmEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
